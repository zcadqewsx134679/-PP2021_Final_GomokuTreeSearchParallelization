/*
 * blupig
 * Copyright (C) 2016-2017 Yunzhu Li
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <gtest/gtest.h>
#include <ai/negamax.h>
#include <api/renju_api.h>

class RenjuAINegamaxTest : public ::testing::Test {
 protected:
    char gs[361] = {0};
    char gs_string[362] = {0};
};

TEST_F(RenjuAINegamaxTest, heuristicNegamax0) {

    int move_r0, move_c0, move_r1, move_c1;

    memcpy(gs_string, "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200100000000000000122200000000000000011200000000000000001210000000000000000200200000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 362);
    RenjuAPI::gsFromString(gs_string, gs);
    RenjuAINegamax::heuristicNegamax(gs, 1, 4, 0, true,  nullptr, &move_r0, &move_c0);
    RenjuAINegamax::heuristicNegamax(gs, 1, 4, 0, false, nullptr, &move_r1, &move_c1);
    EXPECT_EQ(move_r0, move_r1); EXPECT_EQ(move_c0, move_c1);

    memcpy(gs_string, "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200100000000000000122221000000000000011220000000000000001210000000000000001200200000000000011112000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 362);
    RenjuAPI::gsFromString(gs_string, gs);
    RenjuAINegamax::heuristicNegamax(gs, 1, 4, 0, true,  nullptr, &move_r0, &move_c0);
    RenjuAINegamax::heuristicNegamax(gs, 1, 4, 0, false, nullptr, &move_r1, &move_c1);
    EXPECT_EQ(move_r0, move_r1); EXPECT_EQ(move_c0, move_c1);

    memcpy(gs_string, "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000220000000000002111122000000000000001121200000000000000211020000000000000002021000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 362);
    RenjuAPI::gsFromString(gs_string, gs);
    RenjuAINegamax::heuristicNegamax(gs, 1, 4, 0, true,  nullptr, &move_r0, &move_c0);
    RenjuAINegamax::heuristicNegamax(gs, 1, 4, 0, false, nullptr, &move_r1, &move_c1);
    EXPECT_EQ(move_r0, move_r1); EXPECT_EQ(move_c0, move_c1);

    memcpy(gs_string, "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000020000000000000100112100000000000001222210000000000000020122000000000000000101200000000000000000002000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 362);
    RenjuAPI::gsFromString(gs_string, gs);
    RenjuAINegamax::heuristicNegamax(gs, 1, 4, 0, true,  nullptr, &move_r0, &move_c0);
    RenjuAINegamax::heuristicNegamax(gs, 1, 4, 0, false, nullptr, &move_r1, &move_c1);
    EXPECT_EQ(move_r0, move_r1); EXPECT_EQ(move_c0, move_c1);

    memcpy(gs_string, "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000110000000000000000020000000000000000022200000000000000120200010000000000020102120000000000010121210000000000000100211000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 362);
    RenjuAPI::gsFromString(gs_string, gs);
    RenjuAINegamax::heuristicNegamax(gs, 1, 4, 0, true,  nullptr, &move_r0, &move_c0);
    RenjuAINegamax::heuristicNegamax(gs, 1, 4, 0, false, nullptr, &move_r1, &move_c1);
    EXPECT_EQ(move_r0, move_r1); EXPECT_EQ(move_c0, move_c1);
}

TEST_F(RenjuAINegamaxTest, heuristicNegamax1) {

    int move_r0, move_c0, move_r1, move_c1;

    memcpy(gs_string, "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 362);
    RenjuAPI::gsFromString(gs_string, gs);
    RenjuAINegamax::heuristicNegamax(gs, 2, 4, 0, true,  nullptr, &move_r0, &move_c0);
    RenjuAINegamax::heuristicNegamax(gs, 2, 4, 0, false, nullptr, &move_r1, &move_c1);
    EXPECT_EQ(move_r0, move_r1); EXPECT_EQ(move_c0, move_c1);

    memcpy(gs_string, "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100100000000000000121111200000000000002020000000000000000022100000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 362);
    RenjuAPI::gsFromString(gs_string, gs);
    RenjuAINegamax::heuristicNegamax(gs, 2, 4, 0, true,  nullptr, &move_r0, &move_c0);
    RenjuAINegamax::heuristicNegamax(gs, 2, 4, 0, false, nullptr, &move_r1, &move_c1);
    EXPECT_EQ(move_r0, move_r1); EXPECT_EQ(move_c0, move_c1);

    memcpy(gs_string, "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001211100000000000000111200000000000000021220000000000000002000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 362);
    RenjuAPI::gsFromString(gs_string, gs);
    RenjuAINegamax::heuristicNegamax(gs, 2, 4, 0, true,  nullptr, &move_r0, &move_c0);
    RenjuAINegamax::heuristicNegamax(gs, 2, 4, 0, false, nullptr, &move_r1, &move_c1);
    EXPECT_EQ(move_r0, move_r1); EXPECT_EQ(move_c0, move_c1);

    memcpy(gs_string, "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110000000000000000120000000000000000122200000000000000021112000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 362);
    RenjuAPI::gsFromString(gs_string, gs);
    RenjuAINegamax::heuristicNegamax(gs, 2, 4, 0, true,  nullptr, &move_r0, &move_c0);
    RenjuAINegamax::heuristicNegamax(gs, 2, 4, 0, false, nullptr, &move_r1, &move_c1);
    EXPECT_EQ(move_r0, move_r1); EXPECT_EQ(move_c0, move_c1);

    memcpy(gs_string, "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000120000000000000002122211000000000001021112000000000000020101000000000000010202000000000000000002000000000000000002210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 362);
    RenjuAPI::gsFromString(gs_string, gs);
    RenjuAINegamax::heuristicNegamax(gs, 2, 4, 0, true,  nullptr, &move_r0, &move_c0);
    RenjuAINegamax::heuristicNegamax(gs, 2, 4, 0, false, nullptr, &move_r1, &move_c1);
    EXPECT_EQ(move_r0, move_r1); EXPECT_EQ(move_c0, move_c1);

    memcpy(gs_string, "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000020000000000000002120000000000000000220000000000000000010200000000000000000001000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000", 362);
    RenjuAPI::gsFromString(gs_string, gs);
    RenjuAINegamax::heuristicNegamax(gs, 2, 4, 0, true,  nullptr, &move_r0, &move_c0);
    RenjuAINegamax::heuristicNegamax(gs, 2, 4, 0, false, nullptr, &move_r1, &move_c1);
    EXPECT_EQ(move_r0, move_r1); EXPECT_EQ(move_c0, move_c1);
}
